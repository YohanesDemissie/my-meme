{"version":3,"sources":["actions/secrets.js","actions/index.js","components/MemeItem.js","components/MyMemes.js","components/App.js","reducers/index.js","index.js"],"names":["username","password","RECEIVE_MEMES","NEW_MEME","MemeItem","state","hovered","console","log","this","props","text0","text1","memeObject","template_id","meme","id","createMeme","className","onMouseEnter","setState","onMouseLeave","onClick","postMeme","src","url","alt","name","Component","connect","new_meme_object","dispatch","params","bodyParams","Object","keys","map","key","encodeURIComponent","join","fetch","method","headers","body","then","response","json","postMemeJson","new_meme","type","MyMemes","myMemes","index","data","App","memeLimit","class","Form","inline","FormGroup","ControlLabel","FormControl","placeholder","onChange","event","target","value","memes","slice","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","subscribe","getState","receiveMemes","ReactDOM","render","document","getElementById"],"mappings":"6SAAMA,EAAW,aACXC,EAAW,aCCJC,EAAgB,gBAChBC,EAAW,W,ICClBC,E,YACJ,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,SAAS,GAJC,E,wEASZC,QAAQC,IAAI,aAAcC,KAAKC,OADtB,MAEgBD,KAAKC,MAAtBC,EAFC,EAEDA,MAAOC,EAFN,EAEMA,MACTC,EAAa,CACjBC,YAAaL,KAAKC,MAAMK,KAAKC,GAC7BL,QACAC,SAEFH,KAAKC,MAAMO,WAAWJ,K,+BAEd,IAAD,OACP,OACE,yBACEK,UAAU,YACVC,aAAc,kBAAM,EAAKC,SAAS,CAAEd,SAAS,KAC7Ce,aAAc,kBAAM,EAAKD,SAAS,CAACd,SAAS,KAC5CgB,QAAS,kBAAM,EAAKC,aAEpB,yBACEC,IAAKf,KAAKC,MAAMK,KAAKU,IACrBC,IAAKjB,KAAKC,MAAMK,KAAKY,KACrBT,UAAYT,KAAKJ,MAAMC,QAAU,sBAAwB,aAE3D,uBAAGY,UAAaT,KAAKJ,MAAMC,QAAU,WAAa,UAC/CG,KAAKC,MAAMK,KAAKY,W,GAjCJC,aAwCRC,cAAQ,KAAM,CAAEZ,WDQxB,SAAoBa,GACzB,OAAO,SAAUC,GACf,OArBJ,SAAsBC,GACpBA,EAAM,SAAehC,EACrBgC,EAAM,SAAe/B,EAErB,IAAMgC,EAAaC,OAAOC,KAAKH,GAAQI,IAAI,SAAAC,GACzC,OAAOC,mBAAmBD,GAAO,IAAMC,mBAAmBN,EAAOK,MAChEE,KAAK,KAIR,OAFAhC,QAAQC,IAAI,aAAcyB,GAEnBO,MAAM,wCAAyC,CACpDC,OAAQ,OACRC,QAAS,CACP,eAAgB,qCAElBC,KAAMV,IACLW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAKpBC,CAAajB,GACjBc,KAAK,SAAAI,GAAQ,OAAIjB,EA5Bf,CACLkB,KAAM9C,EACNY,KA0BqCiC,SCX1BnB,CAA8BzB,GCzCvC8C,E,iLAEF,OACE,6BAEIzC,KAAKC,MAAMyC,QAAQf,IAAI,SAACrB,EAAMqC,GAC5B,OACE,yBACEf,IAAKe,EACL5B,IAAKT,EAAKsC,KAAK5B,IACfC,IAAI,UACJR,UAAU,uB,GAXJU,aA2BPC,kBANf,SAAyBxB,GACvB,MAAO,CACL8C,QAAS9C,EAAM8C,UAIqB,KAAzBtB,CAA+BqB,GCrBxCI,E,YACJ,aAAc,IAAD,8BACX,+CAEKjD,MAAQ,CACXkD,UAAW,GACX5C,MAAO,GACPC,MAAO,IANE,E,sEASH,IAAD,OACP,OACE,6BACE,4BAAI,oDAEJ,wBAAI4C,MAAM,qBACR,yFACA,oGACA,sGAEF,kBAAC,EAAD,MACA,4BAAI,+CACJ,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,YACC,GACD,kBAACC,EAAA,EAAD,CACEZ,KAAK,OACLa,YAAY,gBACZC,SAAU,SAAAC,GAAK,OAAI,EAAK5C,SAAS,CAAET,MAAOqD,EAAMC,OAAOC,YAG1D,GACD,kBAACP,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,eACC,GACD,kBAACC,EAAA,EAAD,CACEZ,KAAK,OACLa,YAAY,mBACZC,SAAW,SAAAC,GAAK,OAAI,EAAK5C,SAAS,CAAER,MAAOoD,EAAMC,OAAOC,aAK9D,yBAAKhD,UAAU,cAAcI,QAAS,WACpC,EAAKF,SAAS,CAAEmC,UAAW,EAAKlD,MAAMkD,UAAY,OADpD,0BAKE9C,KAAKC,MAAMyD,MAAMC,MAAM,EAAG3D,KAAKJ,MAAMkD,WAAWnB,IAAI,SAACrB,EAAMqC,GACzD,OACE,kBAAC,EAAD,CACEf,IAAKe,EACLrC,KAAMA,EACNJ,MAAO,EAAKN,MAAMM,MAClBC,MAAO,EAAKP,MAAMO,e,GAvDhBgB,aAuEHC,kBANf,SAAyBxB,GACvB,OAAOA,GAK+B,KAAzBwB,CAA+ByB,G,gBC1D9C,IAEee,EAFKC,YAAgB,CAAEH,MAnBtC,WAAqC,IAArB9D,EAAoB,uDAAZ,GAAIkE,EAAQ,uCAClC,OAAOA,EAAOtB,MACZ,KAAK/C,EACH,OAAOqE,EAAOJ,MAChB,QACE,OAAO9D,IAcgC8C,QAV7C,WAAsC,IAArB9C,EAAoB,uDAAZ,GAAIkE,EAAQ,uCACnC,OAAOA,EAAOtB,MACZ,KAAK9C,EAEH,OADAE,EAAK,sBAAOA,GAAP,CAAckE,EAAOxD,OAE5B,QACE,OAAOV,M,QCPPmE,EAAQC,YAAYJ,EAAaK,YAAgBC,MACvDH,EAAMI,UAAU,kBAAMrE,QAAQC,IAAI,QAASgE,EAAMK,cACjDL,EAAMzC,SLOG,SAAUA,GACf,OANKS,MAAM,qCACVI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAMxBF,KAAK,SAAAE,GAAI,OAAIf,EAjBpB,SAAsBe,GAAO,IACnBqB,EAAUrB,EAAKO,KAAfc,MAER,MAAO,CACLlB,KAAM/C,EACNiE,SAYyBW,CAAahC,QKP1CiC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,EAAD,OACWS,SAASC,eAAe,W","file":"static/js/main.07735dfb.chunk.js","sourcesContent":["const username = 'yohanes2o6';\nconst password = 'Testing123';\n\nexport { username, password };","import { username, password } from './secrets';\n\nexport const RECEIVE_MEMES = 'RECEIVE_MEMES';\nexport const NEW_MEME = 'NEW_MEME';\n\nfunction receiveMemes(json) {\n  const { memes } = json.data;\n\n  return {\n    type: RECEIVE_MEMES,\n    memes\n  }\n}\n\nfunction fetchMemesJson() {\n  return fetch('https://api.imgflip.com/get_memes')\n    .then(response => response.json())\n}\n\nexport function fetchMemes() {\n  return function (dispatch) {\n    return fetchMemesJson()\n      .then(json => dispatch(receiveMemes(json)))\n  }\n}\n\nfunction newMeme(meme) {\n  return {\n    type: NEW_MEME,\n    meme\n  }\n}\n\nfunction postMemeJson(params) {\n  params[\"username\"] = username;\n  params[\"password\"] = password;\n\n  const bodyParams = Object.keys(params).map(key => {\n    return encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\n  }).join('&');\n\n  console.log('bodyParams', bodyParams);\n\n  return fetch('https://api.imgflip.com/caption_image', {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: bodyParams\n  }).then(response => response.json());\n}\n\nexport function createMeme(new_meme_object) {\n  return function (dispatch) {\n    return postMemeJson(new_meme_object)\n      .then(new_meme => dispatch(newMeme(new_meme)))\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createMeme } from '../actions'\n\nclass MemeItem extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  postMeme() {\n    console.log('this.props', this.props)\n    const { text0, text1 } = this.props;\n    const memeObject = {\n      template_id: this.props.meme.id,\n      text0,\n      text1\n    }\n    this.props.createMeme(memeObject)\n  }\n  render() {\n    return(\n      <div\n        className=\"meme-item\"\n        onMouseEnter={() => this.setState({ hovered: true })}\n        onMouseLeave={() => this.setState({hovered: false })}\n        onClick={() => this.postMeme()}\n      >\n        <img\n          src={this.props.meme.url}\n          alt={this.props.meme.name}\n          className={ this.state.hovered ? \"meme-img darken-img\" : \"meme-img\"}\n        />\n        <p className= { this.state.hovered ? \"meme-txt\" : \"no-txt\" }>\n          {this.props.meme.name}\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { createMeme })(MemeItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nclass MyMemes extends Component {\n  render() {\n    return(\n      <div>\n        {\n          this.props.myMemes.map((meme, index) => {\n            return (\n              <img\n                key={index}\n                src={meme.data.url}\n                alt=\"my-meme\"\n                className=\"my-meme-img\"\n              />\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    myMemes: state.myMemes\n  }\n}\n\nexport default connect(mapStateToProps, null)(MyMemes);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/index.css'\n\nimport { Form, FormGroup, FormControl, ControlLabel } from 'react-bootstrap';\nimport MemeItem from './MemeItem';\nimport MyMemes from './MyMemes'\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = { //text0 is the API's key for top text. text1 being bottom text\n      memeLimit: 10,\n      text0: '',\n      text1: ''\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1><u>Create Your Own Meme</u></h1>\n        {/* <h3>INSTRUCTIONS</h3> */}\n        <ul class=\"instructions-list\">\n          <li>1. Type your funny punchlines into the 2 text boxes below</li>\n          <li>2. Click \"10 more images\" to browse through collection of 100+ memes</li>\n          <li>3. Select funniest image. Copy completed meme and share with friends!</li>\n        </ul>\n        <MyMemes />\n        <h4><i>Write Some Text</i></h4>\n        <Form inline>\n          <FormGroup>\n            <ControlLabel>Top</ControlLabel>\n            {''}\n            <FormControl\n              type=\"text\"\n              placeholder=\"top text here\"\n              onChange={event => this.setState({ text0: event.target.value })}\n            ></FormControl>\n          </FormGroup>\n          {''}\n          <FormGroup>\n            <ControlLabel>Bottom</ControlLabel>\n            {''}\n            <FormControl\n              type=\"text\"\n              placeholder=\"bottom text here\"\n              onChange={ event => this.setState({ text1: event.target.value })}\n            >\n            </FormControl>\n          </FormGroup>\n        </Form>\n        <div className='meme-button' onClick={() => {\n          this.setState({ memeLimit: this.state.memeLimit + 10 })\n        }}>Load 10 more images...\n        </div>\n        {\n          this.props.memes.slice(0, this.state.memeLimit).map((meme, index) => {\n            return(\n              <MemeItem\n                key={index}\n                meme={meme}\n                text0={this.state.text0}\n                text1={this.state.text1}\n              />\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\n\n\nexport default connect(mapStateToProps, null)(App);","import { combineReducers } from 'redux';\nimport { RECEIVE_MEMES, NEW_MEME } from '../actions';\n\nfunction memes( state = [], action) {\n  switch(action.type) {\n    case RECEIVE_MEMES:\n      return action.memes;\n    default:\n      return state;\n  }\n}\n\nfunction myMemes(state = [], action) {\n  switch(action.type) {\n    case NEW_MEME:\n      state = [...state, action.meme];\n      return state;\n    default:\n      return state;\n    }\n}\n\nconst rootReducer = combineReducers({ memes, myMemes });\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nimport { fetchMemes } from './actions';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nstore.subscribe(() => console.log('store', store.getState()));\nstore.dispatch(fetchMemes())\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));"],"sourceRoot":""}